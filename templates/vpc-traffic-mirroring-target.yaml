AWSTemplateFormatVersion: "2010-09-09"

Description: VPC Traffic Mirroring Target

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Network Load Balancer Configuration'
        Parameters:
          - NLBName
          - NLBScheme
          - NLBSubnet1ID
          - NLBSubnet2ID
      - Label:
          default: 'Target Group Configuration'
        Parameters:
          - VPCID
          - TargetGroupName
      - Label:
          default: Traffic Mirror Target Configuration
        Parameters:
          - NumTargets
          - TargetInstanceType
          - TargetInstanceRootVolumeSize
          - KeyPairName
          - VPCCIDR
          - BastionSecurityGroupID
    ParameterLabels:
      VPCCIDR:
        default: VPC CIDR Block
      VPCID:
        default: VPC ID  
      NLBName:
        default: Network Load Balancer Name
      NLBScheme:
        default: Network Load Balancer Scheme
      NLBSubnet1ID:
        default: ID of Subnet 1 to be associated with NLB
      NLBSubnet2ID:
        default: ID of Subnet 2 to be associated with NLB        
      TargetGroupName:
        default: Target Group Name
      NumTargets:
        default: The number of targets to create. The maximum number is four.     
      TargetInstanceType:
        default: Target Instance Type
      TargetInstanceRootVolumeSize:
        default: Target Instance Size in GB
      KeyPairName:
        default: KeyPair required for accessing server instance
      BastionSecurityGroupID:
        default: ID of Bastion Security Group

Parameters:
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.0/24
    Description: VPC - CIDR block for the VPC
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e).
    Type: 'AWS::EC2::VPC::Id'
  NLBName:
    Description: >-
      Network Load balancer name. This name must be unique within your AWS 
      account and can have a maximum of 32 alphanumeric characters and 
      hyphens. A name cannot begin or end with a hyphen.
    Type: String
    Default: nlb1
    ConstraintDescription: Must be a valid ELB Name
  NLBScheme:
    Description: >-
      Network Load Balancer scheme. Valid values are internet-facing and 
      internal. The default is internal
    Default: internal
    AllowedValues: ['internet-facing', 'internal']
    Type: String
    ConstraintDescription: 'Must be a valid ELB scheme'
  NLBSubnet1ID:
    Description: ID of Subnet 1 to be associated with NLB (e.g., subnet-11223344, subnet-55667788).
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Must be a valid subnet ID
  NLBSubnet2ID:
    Description: ID of Subnet 2 to be associated with NLB (e.g., subnet-11223344, subnet-55667788).
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Must be a valid subnet ID    
  TargetGroupName:
    Description: Target Group Name
    Type: String
    Default: tg1
    ConstraintDescription: Must be a valid target group name
  NumTargets:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
    Default: '1'
    Description: The number of targets to create. The maximum number is four.
    Type: String        
  TargetInstanceType:
    Description: Select EC2 instance type for suricata target instance. Default is set to c5n.large
    Type: String
    Default: c5n.large
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  TargetInstanceRootVolumeSize:
    Description: Target instance disk size in GB. Default is set to 8GB
    Default: 8
    AllowedValues: [8]
    Type: Number
    ConstraintDescription: Should be a valid instance size in GB
  KeyPairName:
    Description: EC2 KeyPair required for accessing EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  BastionSecurityGroupID:
    Description: ID of Bastion Security Group to allow access to targets
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Must be a valid security group ID

Resources:
  TargetSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupName: !Sub "${AWS::StackName}-target-sg"
      GroupDescription: >-
        Access to server instance: allow SSH and ICMP access from desired CIDR.
        Allow all traffic from VPC CIDR
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1                   
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-sg"

  TargetSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref TargetSg
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref BastionSecurityGroupID

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"

  AmznLinux2Ami:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import json
          import logging
          import time

          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          try:
              ssm = boto3.client('ssm')
          except ClientError as e:
              logger.error(f"ERROR: failed to connect to SSM client: {e}")
              sys.exit(1)              

          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logger.info('Received event: {}'.format(json.dumps(event)))

              responseData = {}
              responseStatus = cfnresponse.FAILED

              try:
                  if event["RequestType"] == "Delete":    
                      responseStatus = cfnresponse.SUCCESS
                      cfnresponse.send(event, context, responseStatus, responseData)
              except Exception:
                  logger.exception("Signaling failure to CloudFormation.")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})              

              if event["RequestType"] == "Create":
                  logger.info("Retrieving Latest Amazon Linux 2 AMI using SSM Parameter:")
                  try:
                      name = '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
                      response = ssm.get_parameter(
                        Name = name
                      )
                      image = response['Parameter']['Value']
                      logger.info(f"Amazon linux 2 AMI: {image}")
                  except Exception as e:
                      logger.info(f'boto3.client failure: {e}')

                  responseData['Image'] = image
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.7
      Timeout: 30

  RetrieveImage:
    Type: Custom::RetrieveImage
    Properties:
      ServiceToken: !GetAtt AmznLinux2Ami.Arn

  TargetInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole          
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'

  TargetInstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TargetIntancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 'arn:aws:s3:::prm-mp-sar/*'
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"            
      Roles:
        - !Ref TargetInstanceRole  

  TargetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref TargetInstanceRole 

  Nlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref NLBName
      Scheme: !Ref NLBScheme
      Type: network
      Subnets: 
        - !Ref NLBSubnet1ID
        - !Ref NLBSubnet2ID
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-nlb-1"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      Port: 4789
      Protocol: UDP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
      VpcId: !Ref VPCID
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP 
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-nlb1-tg1"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 4789
      Protocol: UDP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref Nlb

  TargetConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !GetAtt RetrieveImage.Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref TargetInstanceType
      IamInstanceProfile: !Ref TargetInstanceProfile
      SecurityGroups:
        - !Ref TargetSg
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref TargetInstanceRootVolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Install required packages:
          yum update -y
          yum install httpd -y
          amazon-linux-extras install epel -y
          yum install yum-plugin-copr -y
          yum install libmaxminddb -y
          yum copr enable @oisf/suricata-6.0 -y
          yum install suricata -y

          # run suricata-update
          suricata-update   

          # enable and start suricata service:
          systemctl enable suricata
          systemctl start suricata

          # Add ec2-user to suricata group:
          usermod -a -G suricata ec2-user

          # Add read-write permissions to /var/log/suricata and /var/lib/suricata
          chmod -R g+rw /var/log/suricata/
          chmod -R g+rw /var/lib/suricata/ 

          # Add index.html for health check:
          touch /var/www/html/index.html
          curl http://169.254.169.254/latest/dynamic/instance-identity/document > /home/ec2-user/iid
          export instance_az=$(cat /home/ec2-user/iid |grep 'availability' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}')          
          cat <<EOT >> /var/www/html/index.html
          <html>
            <head>
              <title>Amazon VPC Traffic Mirroring Targets</title>
              <meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>
            </head>
            <body bgcolor=black>
              <h1 style="color: white; text-align:center;" >Welcom to Amazon VPC Traffic Mirroing!</h1>
              <p style="color: orange; text-align:center;">
              Target is instantiated in $instance_az.
              </p>
              <h3 style="color: green; text-align:center;">Happy Testing!</h3>
            </body>
          </html>
          EOT

          # enable and start httpd service:
          systemctl enable httpd
          systemctl start httpd

      LaunchConfigurationName: !Sub "${AWS::StackName}-launch-config"

  TargetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-target-asg"
      LaunchConfigurationName: !Ref TargetConfig
      MinSize: !Ref NumTargets
      MaxSize: !Ref NumTargets
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - !Ref NLBSubnet1ID
        - !Ref NLBSubnet2ID
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-target-asg"
        PropagateAtLaunch: "true"
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true        

Outputs:
  NLBArn:
    Description: Service Provider NLB ARN
    Value: !Ref Nlb